Use Case ID: 1
Use Case Name: Deposit cash
Relevant Requirements: 
    - The cash must be added to the account's balance.
Primary Actor: 
    - Client Module
Pre-condition:
    - The user is logged into the account they want to deposit cash to.
Post-condition: 
    - The cash amount is deposited to the account in which the user is logged into.
Basic Flow: 
    1. The user logs into the account.
    2. The user requests to deposit some $ amount.
    3. The client module uses the message module to pack and send the request.
    4. The server module receives the message.
    5. The server module stores the $ amount in the correct account file.
Alternate Flows: 
    1. The user tries to log in.
    2. Log in fails.
Exceptions: 
    - The server may fail to receive or fulfill the request due to reasons such as data corruption or connection issues.
Related Use Cases: 
    - Retrieve cash

---

Use Case ID: 2
Use Case Name: Retrieve cash
Relevant Requirements: 
    - The cash must be taken out of the account's balance.
Primary Actor: 
    - Client Module
Pre-condition: 
    - The user is logged into their account and there exists enough balance to retrieve.
Post-condition: 
    - The retrieved cash must be subtracted from the account balance.
Basic Flow: 
    1. The user logs into the account.
    2. The user requests to retrieve some $ amount.
    3. The client module uses the message module to pack and send the request.
    4. The server module receives the message.
    5. The server module subtracts the $ amount from the correct account.
Alternate Flows: 
    1. The user tries to log in.
    2. Log in fails.
Exceptions: 
    - Server failure
    - Data corruption
    - Wrong account (account doesn't exist or has been deleted)
Related Use Cases: 
    - Deposit cash

---

Use Case ID: 3
Use Case Name: Log in
Relevant Requirements: 
    - The user must be logged into the account they want to log in.
Primary Actor: 
    - Client Module
Pre-condition: 
    - The user is not logged into the account.
    - The account trying to log into exists.
Post-condition: 
    - The user is logged into the account.
Basic Flow: 
    1. The user tries to log into their account.
    2. The user enters their credentials.
    3. The user is logged into their account.
Alternate Flows: 
    1. The user tries to log in.
    2. Log in fails.

    1. The user enters credentials.
    2. Wrong credentials, log in fails.
Exceptions: 
    - The user doesn't exist.
Related Use Cases: 
    - None

---

Use Case ID: 4
Use Case Name: Send message to server
Relevant Requirements: 
    - The client message is sent to the server.
Primary Actor: 
    - Message Module
Pre-condition:
    - The message to send has been initialized with proper information.
Post-condition: 
    - The message is sent to the server.
Basic Flow:
    1. The user makes a request (e.g., deposit cash).
    2. The request is packed and sent via the message module.
    3. The request is received by the server module and unpacked.
Alternate Flows: 
    - None
Exceptions:
    - This module is likely entirely private with the sole purpose of moving back and forth between the server and the client.
Related Use Cases: 
    - Retrieve cash, deposit cash

---

Use Case ID: 5
Use Case Name: Retrieve message from server
Relevant Requirements: 
    - The message is transferred to the client module.
Primary Actor: 
    - Message Module
Pre-condition:
    - The information requested is available in the bank account.
Post-condition: 
    - The information asked for will be made available to the client.
Basic Flow:
    1. The client makes a request using the message module.
    2. The server processes the request and sends a response to the client.
    3. The client receives the response and uses it as needed.
Alternate Flows: 
    1. The client makes a request.
    2. No response, there's no active server.
Exceptions: 
    - The server is down.
    - The server doesn't exist.
Related Use Cases:
    - Retrieve cash, deposit cash

---

Use Case ID: 6
Use Case Name: Get authenticated
Relevant Requirements: 
    - The user is authenticated.
Primary Actor: 
    - Server Module
Pre-condition: 
    - The user has input their credentials.
Post-condition: 
    - The user is authenticated.
Basic Flow: 
    1. The user inputs their credentials.
    2. The message gets sent to the server for authentication.
    3. The server returns the message after evaluating it.
    4. The user is authenticated.
Alternate Flows: 
    1. The user inputs their credentials.
    2. No server response.

    1->2->3 // basic flow.
    4. The authentication fails.
Exceptions: 
    - Data for authentication doesn't exist.
    - Server doesn't exist.
Related Use Cases: 
    - Log in

---

Use Case ID: 7
Use Case Name: Unauthorized user (Attempted fraud)
Relevant Requirements:
    - There is an unauthorized user trying to access an account.
Primary Actor:
    - Server Module
Pre-condition:
    - The attempted user inputs credentials, but there are continued failed attempts.
Post-condition:
    - The user is under suspicion for attempting to access an account that is owned by a different user.
Basic Flow:
    1. The user enters the account credentials.
    2. The user inputs an incorrect passcode or ID.
    3. The server records the failed attempt.
    4. After several failed attempts, the server sends a warning message for suspicious activity.
    5. The failed attempt is logged into the server history; if a predetermined amount of attempts is exceeded, the account may be temporarily locked.
Alternate Flows:
    1. The user enters the account credentials.
    2. The server verifies the account credentials.
    3. The account credentials match the ones on record.
    4. The user enters the account with no further issues.
Exceptions:
    - The server runs into an internal error during credential verification.
    - Network issues prohibit the server from functioning properly.
    - The account may already be locked due to previous suspicious activity.
Related Use Cases: 
    - Log in

---

Use Case ID: 8
Use Case Name: Transferring money (from one account to another)
Relevant Requirements:
    - Funds are being withdrawn from a user's account.
Primary Actor:
    - Client Module
Pre-condition:
    - The user is currently active on their account and has a sufficient balance to transfer.
Post-condition:
    - The money has been transferred to another account, and all parties involved receive confirmation.
Basic Flow:
    1. The user logs into the account.
    2. The user initiates a transfer money request.
    3. The user is prompted to enter the account information they wish to transfer money to.
    4. The user enters the desired amount to transfer.
    5. The server receives all necessary information.
    6. The server transfers the correct amount of money to the recipient's account.
    7. The transaction is successful.
Alternate Flows:
    1. The user doesn't have the minimum balance needed to transfer.
    2. The user cancels the transfer.
Exceptions:
    - The server encountered an error during the transfer.
    - The user entered incorrect account credentials.
    - The user has met the account transfer limit.
Related Use Cases: 
    - Unauthorized user
    - Log in

---

Use Case ID: M001
Use Case Name: Sending message
Relevant Requirements: 
    - 3.1.4.2, 3.1.4.3, 3.1.4.4, 3.1.4.6, 3.1.4.6.1, 3.1.4.6.4
Primary Actor: 
    - Sender
Pre-condition: 
    - Sender is called, and data, current address, and receiving address are provided (3.1.4.3).
Post-condition: 
    - Package is sent.
Basic Flow: 
    1. Sender is called and forks a Sender child.
    2. Child calls Processor to encapsulate a package.
    3. Processor returns the package ready to be sent.
    4. Child reads the receiving address on the package and makes a connection.
    5. Once the connection is made, the package is sent.
    6. Kill Child.
Alternate Flows: 
    - None
Exceptions: 
    - If Sender is invoked with insufficient arguments, throw an error according to UI.
Related Use Cases: 
    - M2, M3

---

Use Case ID: M002
Use Case Name: Receiving message
Relevant Requirements: 
    - 3.1.4.2, 3.1.4.3, 3.1.4.4, 3.1.4.6, 3.1.4.6.1, 3.1.4.6.3
Primary Actor: 
    - Receiver
Pre-condition: 
    - Receiver listens on the designated network for connections.
