CS-401_Group Project Requirements
Software Requirements Specification

1. Purpose
This document outlines the requirements for a Large Banking System.
       1.1. Scope
              This document provides requirements for a Large Banking System. This software will support countless people 
              and interactions. The primary objective being, providing a GUI for the bank employees and users to interact 
              with their accounts. The bank has a server that stores all the data and is retrieved through the GUI. The system
              includes features such as Data storage, Account management, transaction operations, scalability. It operates over
              TCP/IP and is compatible with operating systems with a JVM.

       1.2. Definitions, Acronyms, Abbreviations 
              SU - SuperUser, refers to the class of user with more permissions and functionalities.
              GUI - Graphical user interface.
              User - A regular account user. Has the ability to draw or add funds from their account.
              Joint Account - Multiple users can share the same account.
              Client - Module for client code.
              Server - Module for server code.
              Message - Module for data transfer between client and server.
              JVM - Java Virtual Machine.

       1.3. References and Use Cases:

       Use Case ID: 1
              Use Case Name: Deposit cash
              Relevant Requirements: 
                     The cash must be added to the account's balance.
              Primary Actor: 
                     Client Module
              Pre-condition:
                     The user is logged into the account they want to deposit cash to.
              Post-condition: 
                     The cash amount is deposited to the account in which the user is logged into.
              Basic Flow: 
                     1. The user logs into the account.
                     2. The user requests to deposit some $ amount.
                     3. The client module uses the message module to pack and send the request.
                     4. The server module recieves the message.
                     5. The server module stores the $ amount in the correct account file.
              Alternate Flows: 
                     1. The user tries to logs in.
                     2. log in fails.

              Exceptions: 
                     1. The server may fail to recieve or fulfill the request due to reasons
                     such as data corruption and connection issue.
              Related Use Cases: 
                     Retrieve cash


       Use Case ID: 2
              Use Case Name: Retrieve cash
              Relevant Requirements: 
                     The cash must be taken out of the account's balance.
              Primary Actor: 
                     Client Module
              Pre-condition: 
                     The user is logged into their account and there exist enough balance to retrieve.
              Post-condition: 
                     The retrieved cash must be subtracted from the account balance.
              Basic Flow: 
                     1. The user logs into the account.
                     2. The user requests to retrieve some $ amount.
                     3. The client module uses the message module to pack and send the request.
                     4. The server module recieves the message.
                     5. The server module subtracts the $ amount from the correct account.
              Alternate Flows: 
                     1. The user tries to logs in.
                     2. log in fails.

              Exceptions: 
                     Server failiure
                     data corruption
                     wrong account (account doesn't exist or has been deleted)
              Related Use Cases: 
                     Deposit cash

       Use Case ID: 3
              Use Case Name: log in
              Relevant Requirements: 
                     The user must be logged into the account they want to log in.
              Primary Actor: 
                     Client Module
              Pre-condition: 
                     The user is not logged into the account.
                     The account trying to log into exists.
              Post-condition: 
                     The user is logged into the account.
              Basic Flow: 
                     1. The user tries to log into their account.
                     2. The user enters their credentials
                     3. The user is logged into their account.
              Alternate Flows: 
                     1. The user tries to logs in.
                     2. log in fails.

                     1. user enter credentials
                     2. Wrong credentials, log in fails.
              Exceptions: 
                     The user doesn't exist. 
              Related Use Cases: 
                     None

       Use Case ID: 4
              Use Case Name: send message to server
              Relevant Requirements: 
                     The client message is sent to the server.
              Primary Actor: 
                     Message Module
              Pre-condition:
                     The message to send is has been initialized with proper information. 
              Post-condition: 
                     The message is sent to the server
              Basic Flow:
                     1. User makes a request Ex deposit cash.
                     2. The request is packed and sent via the message module.
                     3. The request is recieved by the server module and unpacked.
              Alternate Flows: 
                     None
              Exceptions:
                     This module is likely entirely private with sole purpose of moving back and forth
                     between the server and the client.
                     None. 
              Related Use Cases: 
                     retrieve cash, deposit cash

       Use Case ID: 5
              Use Case Name: retrieve message from server
              Relevant Requirements: 
                     The message is transfered to the client module.
              Primary Actor: 
                     Message Module
              Pre-condition:
                     The information asked for is available in the bank account.
              Post-condition: 
                     The information asked will be made available to the client.
              Basic Flow:
                     1. The client makes a request using message module.
                     2. The server processes the request and sends a response to client.
                     3. The client displays recieves the response and uses it as needed.
              Alternate Flows: 
                     1. The client makes a request.
                     2. No response, there's no active server.
              Exceptions: 
                     The server is down.
                     The server doesn't exist.
              Related Use Cases:
                     retrieve cash, deposit cash 


       Use Case ID: 6
              Use Case Name: get authenticated
              Relevant Requirements: 
                     The user is authenticated.
              Primary Actor: 
                     Server Module
              Pre-condition: 
                     the user has input their credentials.
              Post-condition: 
                     the user is authenticated.
              Basic Flow: 
                     1. user inputs their credentials.
                     2. the message gets sent to the server for authentication.
                     3. the server returns the message after evaluating it.
                     4. the the user is authenticated.
              Alternate Flows: 
                     1. user inputs their credentials.
                     2. No server response.

                     1->2->3 // basic flow.
                     4. The authentication fails.
              Exceptions: 
                     data for authentication doesn't exist.
                     server doesn't exists.
              Related Use Cases: 
                     log in


       Use Case ID: 7
              Use Case Name: Unauthorized User (Attempted Fraud)
              Relevant Requirements:
                     There is an unauthorized user trying to access an account.
              Primary Actor:
                     Server Module
              Pre-condition:
                     The attempted user attempts to put in credentials but there are
                     continued failed attempts.
              Post-condition:
                     The user is under suspicion for attempting to access an account that
                     is owned by a different user.
              Basic Flow:
                    1. The user enters the account credentials
                    2. User inputs incorrect passcode or ID
                    4. The server records the failed attempt.
                    5. After several failed attempts the server sends back
                    warning message for suspicious activity.
                    6. The failed attempted is logged into the server history,
                    if a predetermined amount of attempts is exceeded, the account
                    may be temporarily locked.
              Alternate Flows:
                    1. The user enters the account credentials
                    2. The server verifies the account credentials
                    3. The account credentials match the ones on record
                    4. The user enters the account with no further issues
              Exceptions:
                    The server runs into an internal error in between verifying
                    the account credentials
                    There is a network issues going on in the area that is
                    prohibiting the server from functioning properly.
                    The account may already be locked from any previous
                    suspicious activity.
              Related Use Cases: 
                    Log in

       Use Case ID: 8
              Use Case Name: Transferring Money (From one account to another)
              Relevant Requirements:
                   Funds are being withdrawn from a user's account.
              Primary Actor:
                    Client Module
              Pre-condition:
                    The user is currently active on their account and has a sufficient
                    amount of money that is able to be transferred.
              Post-condition:
                    The money has been transferred over to another account, all
                    parties involved receive confirmation of the transfer.
              Basic Flow:
                     1. The user logs into the account.
                     2. The user initiates a transfer money request.
                     3. The user is prompted with entering the account information
                     that they wish to transfer money to.
                     4. The user enters the desired amount of money wished to be
                     transferred.
                     5. The server receives all needed information
                     6. The server continues to transfer the right amount of money to
                     recipient account.
                     7. Transaction is successful.
              Alternate Flows:
                    1. The user doesn't have the minimum amount of money needed to
                    transfer
                    2. The user at any point decides to cancel a money transfer.
              Exceptions:
                    1. The server ran into an error at some point during the transfer
                    process
                    2. The user input the incorrect account credentials
                    3. The user has met the limit set on their account for transferring
                    money
                    
       Use Case ID: 10 // message from Rohan: DO NOT DELETE, THIS IS A USE CASE TEMPLATE, MAKE A COPY AND USE THAT COPY
              Use Case Name: 
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 
                    Unauthorized User
                    Log in
                    
       Use Case ID: 9
              Use Case Name: Creating an account
              Relevant Requirements:
                  - A user wants to create an account to be able to store
                  their money in either a checkings or savings.
              Primary Actor:
                  - Client Module
                  - Server Module
              Pre-condition:
                   - The user is in position where it is beneficial to create
                  an account.
              Post-condition:
                  - The user has now made an account and has gained access to
                  further pursue a bank account.
              Basic Flow:
                  1. The user initiates an account creation request.
                  2. The user provides necessary personal information.
                  3. The user's identification begins to be verified.
                  4. The superuser verifies the user's information.
                  5. The user now has an account.
              Alternate Flows:
                  1. The user enters any type of wrong information during
                  the process of wanting to create an account. So the user is
                  prompted to make changes to the incorrect information.
                  2. The user's request to create an account was rejected.
              Exceptions:
                  1. The user provides invalid personal information.
                  2. The user's ID and password are already taken so the user
                  must think of a different ID and password.
                  3. The ID and or password don't meet bank's security requirements.
                  4. The user doesn't meet the bank's requirements in order to
                  create an account. (Ex: Age).
              Related Use Cases:
                     Logging in, get authorized, send message to server, retrieve message
                     from server

       Use Case ID: 10
              Use Case Name: Deleting an account
              Relevant Requirements:
                  - A user's account has reached a point in which it is
                  not needed anymore.
              Primary Actor:
                  - Client Module
                  - Server Module
              Pre-condition:
                  - The user's funds have been removed from the account and
                  has been verified for deletion of account.
              Post-condition:
                  - The user's account has been deleted.
              Basic Flow:
                  1. Initialize deleting an account.
                  2. User is authenticated to proceed with the deleting
                  process.
                  3. The account's information is under review and the user
                  is notified of deleting an account.
                  4. Funds are removed from the account, if any.
                  5. The account has been deleted.
              Alternate Flows:
                  1. The user makes the decision of not wanting to delete
                  their account.
                  2. The account can't be deleted if the user has any type
                  of outstanding charges.
              Exceptions:
                  1. The user fails to authenticate credentials.
                  2. There are outstanding charges to the user's account.
                  3. The server or client run into technical issues
                  throughout the deletion process.
                  4. The user's account has already been deleted.
                  5. The user's account can't be deleted if the account's
                  current status is locked, or restricted.

              Related Use Cases:
                    - Log in ,Unauthorized user
       1.4. Overview 
              The large banking system will provide users with an interface for deposits, and withdrawals from 
              their checking or savings accounts. The SU can do the same for the use, additionally, the SU 
              can also add or remove accounts, add people to an account, or take off people from an account. It 
              has functionalities such as account management, transaction operations, user authentication, data storage,
              data retrieval, scalability, security. It operates over local TCP/IP network.

2. Overall Description
       2.1. Product Perspective 
              The Large Banking System is an application that should be designed to operate within a local network among multiple
              devices. It should provide Server and Client applications. One server should support multiple client applications.
              The system has several interconnected modules such as The Operator Module, Account Module, Server Module, Message
              Module and the Client Module.
              The system should be designed to be scalable, usable with various operating systems through JVM and operational over
              TCP/IP.
       2.2. Product Architecture 
              The system will be organized into 5 major modules: the Operator module, the Account module, 
              the Server module, the Message, and the Client module. Note: System architecture should follow 
              standard OO design practices. 

       2.3. Product Functionality/Features 
              The high-level features of the system are as follows (see section 3 of this document for more 
              detailed requirements that address these features): 
              2.3.1. Users would be able to login to the system, and conduct actions such as:
                     a. Transfer funds to other accounts.
                     b. Manage and see current account balance and information. 
                     c. Make Virtual Deposits.
                     d. view Transaction history
              2.3.2. Users are able to, with the help of a teller, do the following actions:
                     a. Withdraw money. 
                     b. Add, remove or edit access to their accounts. 
                     c. Make a deposit. 
                     d close account.
              2.3.3. System features include:
                     a. Secure communication over TCP/IP.
                     b. Data storage in a secure text file.
                     c. Real-time applications such as deposit, retrieve money.
                     d. scalable
                     f. compatible
                     g. light-weight

       2.4. Constraints 
              2.4.1. The software will be made in Java, hence the software will need to keep in mind the amount 
              of objects and keep it to a minimum at all times. 
              2.4.2. The software will be made for home use as well, hence we will need to keep in mind that 
              internet connection may be unstable/interrupted during use, and proper measures will need to be taken care of. 
              2.4.3. The system must ensure data integrity and available, it must not get corrupted.
              2.4.4 The system must not let users in if their credentials are invalid.
              2.4.5 The system GUI's must be simple and user friendly.
              2.4.6 The system must have protections against attempted fraud.

       2.5. Assumptions and Dependencies
              2.5.1. It is assumed that for client-teller interactions, both parties are physically together, 
              and that the customers are able to provide credentials and proof of identities to the tellers. 
              2.5.2. It is assumed that in-person deposits are monitored and assisted by a teller such that 
              any increase in bank balance is already verified to be correct. 
              2.5.3. It is assumed that there are no transfer fees for any transfer action.


3. Specific Requirements 

3.1. Functional Requirements 

       3.1.1. Common Requirements: 
              3.1.1.1 There should be a standard way of storing information in the txt data file/s. //this is technical
              3.1.1.2 The system must ensure data integrity and availablility.
              3.1.1.3 The system must be scalable.
              3.1.1.4 The system must handle exceptions and not crash.

       3.1.2. Operator Module Requirements: 
              3.1.2. Regular User Sub-Module Requirements:
                     3.1.2.1 Regular users must be able to log in.
                     3.1.2.2 Regular users must be able to transfer funds.
                     3.1.2.3 Regular users must be able to deposit cash.
                     3.1.2.4 Regular users must be able to withdraw cash.
                     3.1.2.5 Regular users must be able to view their transaction history.

              3.1.2. Super User (Admin) Module Requirements: 
                     3.1.2.1 The superuser will have the ability to create new accounts. //they are bankers, not for bankers
                     3.1.2.2 If a checking account has not been active in the last 6 months, the 
                     superuser has the ability to deactivate the said account. 
                     3.1.2.3 If an account has a negative balance or a history of overdrafts, the 
                     superuser will have the ability to declare the account closed.
                     3.1.2.4 The superuser has the ability to assign roles that have appropriate 
                     permissions
       
       3.1.3 Account Module Requirements:
              3.1.3.1 The account will have the date of creation.
              3.1.3.2 The account will have a way to determine that a period of time passed. 
              3.1.3.3 The account will have a checking account balance.
              3.1.3.4 The account will have a separate savings account balance.
              3.1.3.5 The account will have a way to deposit funds.
              3.1.3.6 The account will have a way to extract funds.
              3.1.3.7 The account will have a way to destroy itself upon SU’s request.
              3.1.3.8 Each account will have a unique serial ID used to identify the account.
              3.1.3.9 Serial ID is generated upon account initialization.
              3.1.3.10 Serial ID has a pattern for identification.
              3.1.3.11 Serial ID will be used to authenticate an Account, along with a user 
              3.1.3.9 Serial ID is generated upon account initialization.
              3.1.3.10 Serial ID has a pattern for identification.
              3.1.3.11 Serial ID will be used to authenticate an Account, along with a user 
              generated passcode, which is initiated during account creation. (currently 
              disallowing changing passcode)
              3.1.3.12 The removal of the last User in an account will result in its closure.
              3.1.3.13 Each registered user gains access to the account through 
              authentication with the account's reference list. 
              3.1.3.14 Only the SU can remove or add users from accounts.
              3.1.3.15 Multiple Users may be registered to the same account.
              3.1.3.16 Users can have multiple accounts.

              3.1.3. Checking Account Sub-Module Requirements: 
                     3.1.3.1 The checking account has no limit on the number of withdrawals.
                     3.1.3.2 The checking account has a $5 maintenance fee per month.

              3.1.3. Saving Account Sub-Module Requirements:
                     3.1.3.1 Savings account has a withdrawal limit of 6 monthly withdrawals without a fee.
                     3.1.3.2 If the user withdraws more than 6 times, they will be charged a $5 fee for every withdrawal.
                     3.1.3.3 The savings account will have a 0.10% annual increase rate.

       3.1.4 Message Module Requirements:
              3.1.4.1 Message between client and Server Modules through the internet will be encapsulated. 
              3.1.4.2 Encapsulated data will be referred to a package.
              3.1.4.3 Package will contain data, current address, receiving address.
              3.1.4.4 Package will accept different type of data.
              3.1.4.5 Package is able to be decapsulated by the recipient.
              3.1.4.6 There will be a processor, a sender, and a receiver on both side of the 
              connection.
                     3.1.4.6.1 Processor can encapsulate data into package or decapsulate package 
                     into data.
                     3.1.4.6.2 Sender will let processor create package from passed data and send 
                     package.
                     3.1.4.6.3 Receiver will listen on a designated port for packages and send them to 
                     processor to get data.
                     3.1.4.6.4 Processor, Sender, and Receiver can handle multiple packages 
                     synchronously.

       3.1.5 Client Module Requirements:
              3.1.5.1 All operators' interactions with the application will be through client
              3.1.5.2 Client will authenticate operator before allow access
              3.1.5.3 Client will be able to differentiate Operators access permissions and provide functions accordingly
                     3.1.5.3.1 Client for User will simulate an ATM interaction
                     3.1.5.3.2 Client for SuperUser will simulate a bank teller interaction 
              3.1.5.4 Client will contain GUI

       3.1.6 Server Module Requirements:
              3.1.6.1 The data must be stored within the server application so that it has direct access.
              3.1.6.2 The server must restart if data is corrupted. //pending client. need clarification to fit ui and system design
              3.1.6.3 Server is able to receive requests from Client through Message module
              3.1.6.4 Server will fulfill client's requests
              3.1.6.5 All changes to the application's data must be perform by the server

       3.2. External Interface Requirements 
              3.2.1 The system must operate over a local network using TCP/IP.
              3.2.2 The system must support multiple users simultaniously.
              3.2.3 The system must be scalable to any number of users at any time.
              3.2.4 The system must store all it's data "securely" in a text file.
              3.2.5 The system must be able to work in common operating systems such as Windows, Linux and MacOS. 

       3.3. Internal Interface Requirements 
              3.3.1 Server and Client must have Interface to send and receive requests.
              3.3.2 The Operator module is connected to a GUI through which all operations take place.
              3.3.3 The Superuser Subclass of Operator has slightly different GUI to accomodate for additional functionalities.
              3.3.4 The Server and Client use Message module for bi-communication. 
              3.3.5 The Account module must provide an interface for the Operator module to perform 
              account-related operations such as creating, updating, and deleting accounts.
              3.3.6 The Message module must provide an interface for encapsulating and decapsulating data.
              3.3.7 The Server module must provide an interface for handling authentication requests from the Client module.
              3.3.8 The Client module must provide an interface for users to input their credentials and receive authentication status (GUI).
              3.3.9 The Server, client and account modules must provide an interface for handling deposits, withdrawals, and transfers.
              3.3.10 The account module must procide an interface for keeping data recieved from the server temporarily to show to user.
              3.3.11 The message module must provide an interface for error handling between the client and server modules.
              3.3.12 The account module must provide a way for applying interest rates, account penalties, monthly fees etc.

4. Non-Functional Requirements 
4.1. Security and Privacy Requirements 
       4.1.1. User will need to be authenticated before getting access to any sensitive information
       such as bank balance, account information and account actions. 
       4.1.2. A sequential ordering of server request and response need to be created to prevent 
       inappropriate sequence of actions that affects the balance. 
       4.1.3. Proper authentication methods need to be in place to prevent users from being able 
       to access credentials of other users in the system. 
       4.1.4. Passwords and other authentication information needs to be processed server side, 
       that is that any comparisons are done in the server and only a response is returned. 
       4.1.5 The data will be stored in a text file.

4.2. Environmental Requirements 
       4.2.1. The software needs to be “adaptive” and light weight as the software will be used 
       by customers in a variety of environments.
       4.2.2. The software needs to be internet friendly, which means that information sent to the 
       server should be checked and verified to be complete and whole before being sent. 
       4.2.3 The system must be deployable on common operating systems, such as Windows, Linux and MacOS.
       4.2.4 The system is dependent on JVM 22 being available. 

4.3. Performance Requirements 
       4.3.1 The system should be fast enough for the user to not experience a delay greater than 3 
       seconds.
       4.3.2 Most operations such as adding or retrieving cash are constant time operations and should be 
       executed in reasonable time. Meaning the algorithm should take O(1) time.
       4.3.3 The system should not crash when under load, Example - multiple users try to access it.
       4.3.4 The system should be able to handle any unexpected exceptions without crashing the app.