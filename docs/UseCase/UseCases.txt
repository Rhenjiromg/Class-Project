GUI Use Cases:

//case G001 i purposedly not using thread because this log in will initiate the GUI, GUI no work while waiting for log in confirm
//also make sure we dont support duplicate log ins.
Use Case ID: G001
Use Case Name: Operator run Client
Relevant Requirements: 
Primary Actor: 
    - GUI
Pre-condition:
    - The executable for the client is successfully launch
Post-condition: 
    - Operator is lead through interfaces to finish logging in and able to access features.
Basic Flow: 
    1. GUI shows operator log in interface.
    2. GUI run client's facade method to handle authentication.
    3. GUI receive response from method, which will contain data.
    4. GUI run client facade's method to parse and process data.
    5. Client's facade run GUI's method to display data to user.
Alternate Flows: 
    1 - 4. same as basic Flow
    2. Client's facade detect superuser through regex the operator id.
    3. Client's facade run GUI method to display superuser's interface.
Exceptions: 
    - If response data contain failed log in exception, display failed log in GUI.
Related Use Cases: 
    - Log in

---

Use Case ID: G002
Use Case Name: Operator at the Banker table (Superuser doing some work on User behalf)
Relevant Requirements: 
Primary Actor: 
    - Operator Module
Pre-condition: 
    - Client launch successful.
Post-condition: 
    - Superuser have access to user accounts.
Basic Flow: 
    1. Superuser initiate log in on client.
    2. Client follows log in process, detect a superuser ID.
    3. Client shows superuser GUI.
    4. GUI include an additional log in panel, with option to create user.
    5. Superuser enters user authenticator, client will use the same method as if an user is attempt to log in.
    6. Upon 2nd log in success, GUI display user's GUI alongside superuser GUI.
    7. Each log ins are logged.
Alternate Flows: 
    1-3. as basic
    4. Superuser select element to create user.
    5. GUI show textfield similar to log in, take 2 string user id and password.
    6. Facade's create user method is called.
    7. Once user is created, GUI show new user with empty list of account, ready to be populated.
Exceptions: 
    - Superuser id authenticate failed.
Related Use Cases: 
    - Log in, Operator run client

---

Client and Server section: 

Use Case ID: CS001
Use Case Name: Send message from one host
Relevant Requirements: 3.1.4.1, 3.1.4.2, 3.1.
Primary Actor: 
    - Server Module
    - Client Module
Pre-condition:
    - Server or Client have some data for a specific request.
Post-condition: 
    - The data is sent to recipient with correct enum flag.
Basic Flow:
    1. The server or client makes a request by passing the data, a corresponding enum flag, and the destination address to the message module.
    2. The server or client sends the created message object to the address on the message object.
Alternate Flows: 
Exceptions: 
    - The recipient address is not known to the server or client.
Related Use Cases:
    - M001

---

Use Case ID: CS002
Use Case Name: Receive message from one host
Relevant Requirements: 3.1.4.1, 3.1.4.2, 3.1.4.3,  3.1.4.5.
Primary Actor: 
    - Client Module
Pre-condition:
    - Port listener detect a connection.
Post-condition: 
    - A request is processed.
Basic Flow:
    1. Port listener detect a connection.
    2. Port listener fork a thread to handle this connection.
    3. Thread call facade method to handle this message object contain by the inbound connection.
    4. Facade check message enum, pass parsed data as arguements on correct faccade method based on the enum.
Alternate Flows: 
    - None
Exceptions:
    - Enum is unknown to facade.
    - Connection does not have a message object.
    - Message does not contain correct arguements for determined facade method.
Related Use Cases: 
    - M002

---
Use Case ID: CS003
Use Case Name: Log in
Relevant Requirements: 3.1.2.1, 3.1.2.2, 3.1.2.3
Primary Actor: 
    - Client Module
Pre-condition: 
    - The operator is not authenticated.
Post-condition: 
    - The operator is authenticated.
Basic Flow: 
    1. Client shows operator a log in interface.
    2. The operator enters their authenticator.
    3. Client invoke message to send request to Server using authenticator.
    4. Account is authenticated by server.
Alternate Flows: 
    1. The authentication failed.
    2. Server denies request.
    3. Client invoke correct GUI response.
    4. Events are logged

    1. entered authenticator belongs to superuser
    2-4. as basic Flow
    7. show superuser GUI
Exceptions: 
    - If operator doesn't exist, response same as authentication failed.
Related Use Cases: 
    - CS001, CS002

---
Use Case ID: CS004
Use Case Name: Account authorization
Relevant Requirements: 3.1.2.4.6 
Primary Actor: 
    - Operator module
Pre-condition: 
    - Server receive a message object.
    - message object enum is not logIn
    - Message object contains an operator id and an account id among its parsed arguements
Post-condition: 
    - The operator is authorized.
Basic Flow: 
    1. Server message handler thread detect non-logIn enum.
    2. Facade's method must have first method call be an authorize method with operator id and an account id as arguements.
    3. Authorize method return true, facade method continues operation.
    4. Authorization success logged.
Alternate Flows: 
    1. Authorize method return false.
    2. Facade method halt, return with authorization fails exception.
    3. Facade calls method to send authorization error together with update display data for client.
    4. Client handle response and update display.
    5. Events are logged.
Exceptions: 
Related Use Cases: 
    - CS001, CS002

---
---

Messaging Module Use Cases: 
//still pending changes to reflect current message module: inclusion of enum, change from package to data being in string, processor -> getData()
//encapsulate data use case change to just call the right constructor -> influenced by server/client's facade (i.e) this will be more of a facade use cases

Use Case ID: M001
Use Case Name: Creating Message
Relevant Requirements: 3.1.4.2, 3.1.4.3, 3.1.4.4, 3.1.4.5, 3.1.4.5.1, 3.1.4.5.4
Primary Actor: Message Module 
Pre-condition: 
    - Message constructor is called with data string and enum
Post-condition: 
    - Message object created
Basic Flow: 
//remove multithreading as now that is handled by other modules
    1. Constructor is called with enum and string data, and other parameters
    2. Message object created.
Alternate Flows:      
Exceptions: 
    1. Unrecognized enum. 
    2. MIssing arguements
Related Use Cases: CS001

---

Use Case ID: M002
Use Case Name: Processing Message
Relevant Requirements: 3.1.4.2, 3.1.4.3, 3.1.4.4, 3.1.4.6, 3.1.4.6.1, 3.1.4.6.3
Primary Actor: Facade
Pre-condition: 
    - Facade is handling a message object
Post-condition: 
    - Facade decides which appropriate methods to call
Basic Flow: 
    1. Get enum and check it with message's enum.
    2. If enum exist in enum list, call message method to parse data string into array of strings
    3. Call correct facade methods based on enum, pass strings from parsed string array as arguaments in receiving order.
Alternate Flows: 
Exceptions:   
    1. Message object missing enum.
    2. Enum does not exist in enum list.
    3. Parsed string array does not contain correct arguements for method call.

    -> Log, thow correct exception and facde handle with response messgae to sender.
Related Use Cases: CS001

---

Account use cases:

Use Case ID: A001
Use Case Name: Account transfer
Relevant Requirements: 
    - recived a request of transfering
Primary Actor: 
    - Account module
Pre-condition: 
    - Account is accessing by authorized operator.
    - Server invoke account transfer method.
Post-condition: 
    - Account transferred, balance update.
Basic Flow: 
    1. Checking current balance against transfer amount.
    2. Checking transfer constraint.
    3. Account initialized correct destination accounts.
    4. Update balance from both accounts to reflect change.
    5. Update new balance to files.
Alternate Flows:
Exceptions: 
    - Account dont exist, invoke correct client response.
    - Transfer constraint invoked, abort
Related Use Cases: 
    - Transfering request

---

Use Case ID: A002
Use Case Name: Creating an account
Relevant Requirements:
    - A user wants to create an account to be able to store
    their money in either a checkings or savings.
Primary Actor:
    - Client Module
    - Server Module
Pre-condition:
    - The user is in position where it is beneficial to create
    an account.
Post-condition:
    - The user has now made an account and has gained access to
further pursue a bank account.
Basic Flow:
    1. The user initiates an account creation request.
    2. The user provides necessary personal information.
    3. The user's identification begins to be verified.
    4. The superuser verifies the user's information.
    5. The user now has an account.
Alternate Flows:
    1. The user enters any type of wrong information during
    the process of wanting to create an account. So the user is
    prompted to make changes to the incorrect information.
    2. The user's request to create an account was rejected.
Exceptions:
    1. The user provides invalid personal information.
    2. The user's ID and password are already taken so the user
    must think of a different ID and password.
    3. The ID and or password don't meet bank's security requirements.
    4. The user doesn't meet the bank's requirements in order to
    create an account. (Ex: Age).
    Related Use Cases:
    Logging in, get authorized, send message to server, retrieve message
    from server

---

Use Case ID: A003
Use Case Name: Deleting an account
Relevant Requirements:
    - A user's account has reached a point in which it is not needed anymore.
Primary Actor:
    - Client Module
    - Server Module
Pre-condition:
    - The user's funds have been removed from the account and
    has been verified for deletion of account.
Post-condition:
    - The user's account has been deleted.
Basic Flow:
    1. Initialize deleting an account.
    2. User is authenticated to proceed with the deleting
    process.
    3. The account's information is under review and the user
    is notified of deleting an account.
    4. Funds are removed from the account, if any.
    5. The account has been deleted.
Alternate Flows:
    1. The user makes the decision of not wanting to delete
    their account.
    2. The account can't be deleted if the user has any type
    of outstanding charges.
Exceptions:
    1. The user fails to authenticate credentials.
    2. There are outstanding charges to the user's account.
    3. The server or client run into technical issues
    throughout the deletion process.
    4. The user's account has already been deleted.
    5. The user's account can't be deleted if the account's
    current status is locked, or restricted.
Related Use Cases:
    - Log in ,Unauthorized user

---

Use Case ID: A004
Use Case Name: Add a user to an account
Relevant Requirements: 3.1.3.15, 3.1.3.16.
Primary Actor: Account Module 
Pre-condition: An account exists and a user exists.
Post-condition: The account and user is connected and the user has access to the account.
Basic Flow: 
    1. The primary holder of the account logs-in from the Teller's interface. 
    2. The user provides the user ID of the user that is to be added. 
    3. The to be added user logs in through the teller interface. 
Alternate Flows: 
    none
Exceptions: 
    1. The user does not have the required access to the account. 
    2. The user is already added to the account. 
Related Use Cases:

Use Case ID: A005
Use Case Name: Remove a user from an account. 
Relevant Requirements: 3.1.3.15, 3.1.3.16.
Primary Actor: Client Module.
Pre-condition: An additional user is a part of an account.
Post-condition: The user is removed from the account. 
Basic Flow: 
    1. The primary holder of the account logs-in from the Teller's interface. 
    2. The user provides the user ID of the user that is to be deleted.
    3. The user's access to the account is erased. 
Alternate Flows: 
Exceptions: 
    1. The user does not have the required access to the account. 
    2. The user is already removed from the account. 
Related Use Cases:

---
//check on A006 use case name
Use Case ID: A006
Use Case Name: Accounts Module, Client Modules, 
Relevant Requirements: 3.1.2.4.3, 3.1.2.3.5 .
Primary Actor: Operator
Pre-condition: 
    1. The customer must be logged into the system with valid credentials.
    2. The customer must have at least one bank account registered.
    3. The customer initiates a request to view their transaction history.
Post-condition: 
    The transaction history is presented to the customer.
Basic Flow: 
    1. The customer navigates to the "Account Summary" or "Transactions" section.
    2. The system displays a default view of the most recent transactions for the selected account.
Alternate Flows: 
    No Transactions: If the account has no transactions for the selected date range, the system will display a “No transactions found” message.
    Filter Error: If the filters entered by the customer are invalid (e.g., future date), the system prompts the operator to correct the input.
Exceptions: 
    System downtime or unavailability might prevent transaction data from being retrieved.
    If there’s a lag in the backend systems, some recent transactions may not appear immediately.
Related Use Cases:

---