

Use Case ID: M1
Use Case Name: Sending Message
Relevant Requirements: 3.1.4.2, 3.1.4.3, 3.1.4.4, 3.1.4.6, 3.1.4.6.1, 3.1.4.6.4
Primary Actor: Message 
Pre-condition: 
    Message is called and provided data, current address, receiving address are provided (3.1.4.3)
Post-condition: 
    Package is sent
Basic Flow: 
    1. Message is called with data
    2. Message call Processor to get package from data
    3. Sender is called and fork a Sender child
    4. Child read receiving address on package and make a connection
    5. Once connection is made, package is sent
    6. Kill Child
Alternate Flows:      
Exceptions: 
    If Sender is envoke with lacking arguements, throw error according to UI
Related Use Cases: M2, M3


Use Case ID: M2
Use Case Name: Receiving Message
Relevant Requirements: 3.1.4.2, 3.1.4.3, 3.1.4.4, 3.1.4.6, 3.1.4.6.1, 3.1.4.6.3
Primary Actor: Message
Pre-condition: 
    Message sit on designated network and listen for connections
Post-condition: 
    package received and decapsulated
Basic Flow: 
    1. Message receive a connection with package
    2. Receiver is called to fork a child to handle that request
    3. Child receive package from connection
    4. Child call Processor to decapsulate the package
    5. Child returns encapsulated data
    6. Kill Child.
Alternate Flows: 
Exceptions:   
Related Use Cases: M1, M4

Use Case ID: M3
Use Case Name: Encapsulate data
Relevant Requirements:  
Primary Actor: Processor
Pre-condition: Processor get called with data
Post-condition: Processor returns a package
Basic Flow:
    1. Processor get called with data
    2. Processor fork a child to process data
    3. Child create a package
    4. Kill Child, return package
Alternate Flows: 
Exceptions: 
Related Use Cases: M1, M2

Use Case ID: M4
Use Case Name: Decapsulate data
Relevant Requirements: 
Primary Actor: Processor
Pre-condition: Processor get called with a package
Post-condition: Processor returns encapsulated data
Basic Flow: 
    1. Processor get called with package
    2. Processor fork a child to process package
    3. Child parse and tokenize package
    4. Kill Child, return data
Alternate Flows: 
Exceptions: 
Related Use Cases: M1, M2