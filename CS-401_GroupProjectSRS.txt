

CS-401_Group Project Requirements
Software Requirements Specification


1. Purpose
This document outlines the requirements for a Large Banking System.

       1.1. Scope
              This document provides requirements for a Large Banking System. This software will support countless people 
              and interactions. The primary objective being, providing a GUI for the bank employees and users to interact 
              with their accounts. The bank has a server that stores all the data and is retrieved through the GUI.

       1.2. Definitions, Acronyms, Abbreviations 
              List any acronyms, terms etc. that need to be defined.
              List any acronyms, terms etc. that need to be defined.
              SU - SuperUser, refers to the class of user with more permissions and functionalities.
              GUI - Graphical user interface.
              User - A regular account user. Has the ability to draw or add funds from their account.
              Joint Account - Multiple users can share the same account.
              Client - Module for client code.
              Host - Module for server code.
              Message - Module for data transfer between client and server.
              JVM - Java Virtual Machine.

       1.3. References 
              Use Cases:

              Use Case ID: 1
              Use Case Name: Deposit cash
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 


              Use Case ID: 2
              Use Case Name: Retrieve cash
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 


              Use Case ID: 3
              Use Case Name: log in
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 


              Use Case ID: 4
              Use Case Name: send message to server
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 


              Use Case ID: 5
              Use Case Name: retrieve message from server
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 


              Use Case ID: 1
              Use Case Name: 
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 


              Use Case ID: 1
              Use Case Name: 
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 


              Use Case ID: 1
              Use Case Name: 
              Relevant Requirements: 
              Primary Actor: 
              Pre-condition: 
              Post-condition: 
              Basic Flow: 
              Alternate Flows: 
              Exceptions: 
              Related Use Cases: 

       1.4. Overview 
              The large banking system will provide users with an interface for deposits, and withdrawals from 
              their checking or savings accounts. The SU can do the same for the use, additionally, the SU 
              can also add or remove accounts, add people to an account, or take off people from an account. 


2. Overall Description
       2.1. Product Perspective 

       2.2. Product Architecture 
              The system will be organized into 5 major modules: the Operator module, the Account module, 
              the Host module, the Message, and the Client module. Note: System architecture should follow 
              standard OO design practices. 

       2.3. Product Functionality/Features 
              The high-level features of the system are as follows (see section 3 of this document for more 
              detailed requirements that address these features): 
              2.3.1. Users would be able to login to the system, and conduct actions such as:
                     a. Transfer funds to other accounts.
                     b. Manage and see current account balance and information. 
                     c. Make Virtual Deposits.
              2.3.2. Users are able to, with the help of a teller, do the following actions:
                     a. Withdraw money. 
                     b. Add, remove or edit access to their accounts. 
                     c. Make a deposit. 
              2.3.3. 


       2.4. Constraints 
              2.4.1. The software will be made in Java, hence the software will need to keep in mind the amount 
              of objects and keep it to a minimum at all times. 
              2.4.2. The software will be made for home use as well, hence we will need to keep in mind that 
              internet connection may be unstable/interrupted during use, and proper measures will need to be taken care of. 
              2.4.3. 

       2.5. Assumptions and Dependencies
              2.5.1. It is assumed that for client-teller interactions, both parties are physically together, 
              and that the customers are able to provide credentials and proof of identities to the tellers. 
              2.5.2. It is assumed that in-person deposits are monitored and assisted by a teller such that 
              any increase in bank balance is already verified to be correct. 
              2.5.3. It is assumed that there are no transfer fees for any transfer action.


3. Specific Requirements 

3.1. Functional Requirements 

       3.1.1. Common Requirements: 
       
       3.1.2. Operator Module Requirements: 
              3.1.2. Regular User Sub-Module Requirements:
                     3.1.2.1 ...

              3.1.2. Super User (Admin) Module Requirements: 
                     3.1.2.1 The superuser will have the ability to create new accounts for bankers
                     3.1.2.2 If a checking account has not been active in the last 6 months, the 
                     superuser has the ability to deactivate the said account. 
                     3.1.2.3 If an account has a negative balance or a history of overdrafts, the 
                     superuser will have the ability to declare the account closed.
                     3.1.2.4 The superuser has the ability to assign roles that have appropriate 
                     permissions
       
       3.1.3 Account Module Requirements:
              3.1.3.1 The account will have the date of creation.
              3.1.3.2 The account will have a way to determine that a year or a month has passed.
              3.1.3.3 The account will have a checking account balance.
              3.1.3.4 The account will have a separate savings account balance.
              3.1.3.5 The account will have a way to deposit funds.
              3.1.3.6 The account will have a way to extract funds.
              3.1.3.7 The account will have a way to destroy itself upon SU’s request.
              3.1.3.8 Each account will have a unique serial ID used to identify the account.
              3.1.1.9 Serial ID is generated upon account initialization.
              3.1.1.10 Serial ID has a pattern for identification.
              3.1.1.11 Serial ID will be used to authenticate an Account, along with a user 
              generated passcode, which is initiated during account creation. (currently 
              disallowing changing passcode)
              3.1.1.12 The removal of the last User in an account will result in its closure.
              3.1.1.13 Each registered user gains access to the account through 
              authentication with the account's reference list. 
              3.1.1.14 Only the SU can remove or add users from accounts.
              3.1.1.15 Multiple Users may be registered to the same account.
              3.1.1.16 Users can have multiple accounts.

              3.1.3. Checking Account Sub-Module Requirements: 
                     3.1.3.1 The checking account has no limit on the number of withdrawals.
                     3.1.3.2 The checking account has a $5 maintenance fee per month.

              3.1.3. Saving Account Sub-Module Requirements:
                     3.1.3.1 Savings account has a withdrawal limit of 6 monthly withdrawals without a fee.
                     3.1.3.2 If the user withdraws more than 6 times, they will be charged a $5 fee for every withdrawal.
                     3.1.3.3 The savings account will have a 0.10% annual increase rate.

       3.1.4 Message Module Requirements:
              3.1.4.1 Message between client and host through the internet will be encapsulated. 
              3.1.4.2 Encapsulated data will be referred to a package.
              3.1.4.3 Package will contain data, current address, receiving address, and type 
              of data.
              3.1.4.4 The encapsulated method will accept different type of information.
              3.1.4.5 The encapsulated data is able to be decapsulated by the recipient.
              3.1.4.6 There will be a processor, a sender, and a receiver on both side of the 
              connection.
              3.1.4.7 Processor can encapsulate data into package or decapsulate package 
              into data.
              3.1.4.8 Sender will let processor create package from passed data and send 
              package.
              3.1.4.9 Receiver will listen on a designated port for packages and send them to 
              processor to get data.
              3.1.4.10 Processor, Sender, and Receiver can handle multiple packages 
              synchronously.

       3.1.5 Client Module Requirements:


       3.1.6 Host Module Requirements:


       3.2. External Interface Requirements 

       3.3. Internal Interface Requirements 


4. Non-Functional Requirements 
4.1. Security and Privacy Requirements 
       4.1.1. User will need to be authenticated before getting access to any sensitive information such as bank balance, 
       account information and account actions. 
       4.1.2. A sequential ordering of server request and response need to be created to prevent 
       inappropriate sequence of actions that affects the balance. 
       4.1.3. Proper authentication methods need to be in place to prevent users from being able 
       to access credentials of other users in the system. 
       4.1.4. Passwords and other authentication information needs to be processed server side, 
       that is that any comparisons are done in the server and only a response is returned. 
       4.1.5 The data will be stored in a text file.

4.2. Environmental Requirements 
       4.2.1. The software needs to be “adaptive” and light weight as the software will be used 
       by customers in a variety of environments.
       4.2.2. The software needs to be internet friendly, which means that information sent to the 
       server should be checked and verified to be complete and whole before being sent. 
       4.2.3. The software would need to be 
       4.2.4 The system must be deployable on any OS, for Example: Linux, Mac, or Windows. 
       4.2.5 The system has JVM as it's required to run Java code.

4.3. Performance Requirements 
       4.3.1 The system should be fast enough for the user to not experience a delay greater than 3 
       seconds.
       4.3.2 Most operations such as adding or retrieving cash are constant time operations and should be 
       executed in reasonable time. Meaning the algorithm should take O(1) time.
